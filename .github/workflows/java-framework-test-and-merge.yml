name: Dev code test & PR to staging

on:
  push:
    branches:
      - develop
    paths:
      - java-framework/**
      - .github/workflows/**

jobs:
  load-docker-cache:
    runs-on: ubuntu-latest
    name: Set up the docker layers cache
    steps:
      - name: Docker Layer Caching2
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true
        with:
          key: services-docker-cache-{hash}
          restore-keys: |
            foo-docker-cache-

  build-and-test-project:
    name: Build and test project
    needs: load-docker-cache
    uses: ./.github/workflows/run-e2e-tests-java-framework.yml
    with:
      environment: develop
      branch: develop
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  create-pr:
    name: Create Pull Request
    needs: build-and-test-project
    if: ${{ needs.build-and-test-project.outputs.workflow-status == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      workflow-status: ${{ steps.set_status.outputs.workflow-status || steps.set_status.outputs.workflow-status }}
    steps:
      - name: pull-request-action
        uses: vsoch/pull-request-action@1.0.24
        id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_PREFIX: ""
          PULL_REQUEST_BRANCH: "staging"
          PULL_REQUEST_FROM_BRANCH: "develop"
          PULL_REQUEST_TITLE: "Post-testing automated PR"

      - name: Set job status
        id: set_status
        run: |
          if [[ ${{ steps.pr.outcome }} == "success" ]]; then
            echo "PR created successfully"
            echo "workflow-status=success" >> $GITHUB_OUTPUT
          else
            echo "Failed creating PR"
            echo "workflow-status=failure" >> $GITHUB_OUTPUT
          fi

  merge-pr:
    name: Deploy to staging
    needs: create-pr
    if: ${{ needs.create-pr.outputs.workflow-status == 'success' }}
    uses: ./.github/workflows/merge-develop-into-staging.yaml
    with:
      target-environment: staging
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  merge-pr-validation:
    name: Validate deploy success
    needs: [ create-pr, merge-pr ]
#    if: ${{ needs.merge-pr.outputs.workflow-status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
#          token: ${{ secrets.GITHUB_TOKEN }}
#          ref: 'staging'

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check if PR was merged into staging
        id: check_merge_status
        run: |
          echo "Checking if the PR was merged successfully..."
          pr_number=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls?state=closed\&base=staging | jq '.[0].number')
          pr_merged=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/merge | jq -r '.merged')
          if [ "$pr_merged" == "true" ]; then
          echo "The PR #$pr_number was merged successfully into the staging branch."
          else
          echo "The PR #$pr_number was NOT merged into the staging branch."
          exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  if_error_or_failure:
    runs-on: ubuntu-latest
    if: >-
      github.event.state == 'error' ||
      github.event.state == 'failure'
    steps:
      - name: Log error or failure
        env:
          DESCRIPTION: ${{ github.event.description }}
        run: |
          echo The status is error or failed: $DESCRIPTION
          echo Workflow failed
          exit 1
