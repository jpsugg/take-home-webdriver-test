name: Test develop code and create PR to staging

on:
  push:
    branches:
      - develop
    paths:
      - java-framework/**
      - .github/workflows/**

jobs:
  load-docker-cache:
    runs-on: ubuntu-latest
    name: Set up the docker layers cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Docker Layer Caching
        uses: actions/cache@v2
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/.docker/**') }}
          restore-keys: ${{ runner.os }}-docker-
      - name: Docker Layer Caching - Build
        run: |
          docker build \
            --cache-from type=local,src=/tmp/.build-cache \
            --cache-to type=local,dest=/tmp/.build-cache \
            --build-arg CACHEBUST=$(date +%s) \
            --file docker-compose.yml \
            --target development \
            --tag my-image:latest \
            .
      - name: Docker Layer Caching - Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker-compose.yml
          cache-from: type=local,src=/tmp/.build-cache
          target: development
          push: true
          registry: docker.pkg.github.com
          repository: ${{ github.repository }}/java-framework
          tag: ${{ github.sha }}


  build-and-test-project:
    name: Build and test project
    needs: load-docker-cache
    uses: ./.github/workflows/run-e2e-tests-java-framework.yml
    with:
      environment: develop
      branch: develop
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  create-pr:
    name: Create Pull Request
    needs: build-and-test-project
    if: ${{ needs.build-and-test-project.outputs.workflow-status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: pull-request-action
        uses: vsoch/pull-request-action@master
        id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_PREFIX: ""
          PULL_REQUEST_BRANCH: "staging"
          PULL_REQUEST_FROM_BRANCH: "develop"
          PULL_REQUEST_TITLE: "Post-testing automated PR"
      - name: Finish PR creation
        if: ${{ steps.pr.outputs.result == 'Created PR' }}
        run: |
          echo "PR created successfully"
          echo "::set-output name=workflow-status::success"
        id: pr_success
      - if: ${{ steps.pr.outputs.result != 'Created PR' }}
        name: Failed to create PR
        run: |
          echo Failed to create the PR
          echo "::set-output name=workflow-status::failure"
        id: pr_failure

    outputs:
      workflow-status: ${{ steps.pr_success.outputs.workflow-status || steps.pr_failure.outputs.workflow-status }}

  merge-pr:
    name: Deploy to staging
    needs: create-pr
    if: needs.create-pr.outputs.workflow-status == 'success'
    uses: ./.github/workflows/merge-develop-into-staging.yaml
    with:
      target-environment: staging
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  merge-pr-validation:
    name: Validate deploy success
    needs: [ create-pr, merge-pr ]
    if: needs.create-pr.outputs.workflow-status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Check if merged
        id: check_merge_status
        run: |
          echo "Checking if the PR was merged successfully..."
          pr_number=$(gh pr list --base staging --search "author:github-actions[bot]" --json number -q ".data[0].number")
          pr_info=$(gh pr view $pr_number --json state)
          pr_merged=$(echo "$pr_info" | jq -r '.state.merged')
          echo "::set-output name=merged::${pr_merged}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Automated PR merge success
        if: ${{ steps.check_merge_status.outputs.merged != 'true' }}
        run: |
          echo Deployment phase failed
          exit 1

  if_error_or_failure:
    runs-on: ubuntu-latest
    if: >-
      github.event.state == 'error' ||
      github.event.state == 'failure'
    steps:
      - name: Log error or failure
        env:
          DESCRIPTION: ${{ github.event.description }}
        run: |
          echo The status is error or failed: $DESCRIPTION
          echo Workflow failed
          exit 1
